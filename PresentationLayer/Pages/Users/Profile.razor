@page "/user/profile"
@using Microsoft.AspNetCore.Identity;
@using ServiceLayer;
@using BusinessLayer;
@using Services;
@using Microsoft.Extensions.Logging;
@inject UserManager<User> userManager
@inject UserManager identityManager;
@inject SignInManager<User> signInManager;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager


<h3>Profile</h3>
<EditForm Model="@Model" OnValidSubmit="@UpdateProfile">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="container">
		<div class="form-row">
			<div class="col-md-4">
				<label for="name">Username</label>
				<InputText id="name" class="form-control" @bind-Value="Model.UserName " />
			</div>
			<div class="col-md-4">
				<label for="name">First name</label>
				<InputText id="name" class="form-control" @bind-Value="Model.FirstName " />
			</div>
			<div class="col-md-4">
				<label for="name">Last name</label>
				<InputText id="name" class="form-control" @bind-Value="Model.LastName " />
			</div>
			<div class="col-md-4">
				<label for="name">Email</label>
				<InputText id="name" class="form-control" @bind-Value="Model.Email " />
			</div>
			<div class="col-md-4">
				<label for="name">Age</label>
				<InputNumber id="name" class="form-control" TValue="int?" @bind-Value="Model.Age" />
			</div>
		</div>
		<button type="submit" class="btn border-dark mt-2 ml-3">Update profile</button>
	</div>
</EditForm>


@code {
	private User Model = new();

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		var name = user.Identity.Name;


		Model= await identityManager.FindUserByNameAsync(name);
	}

	private async Task UpdateProfile()
	{
		try
		{
			await identityManager.UpdateUserAsync(Model);
			var customAuthenticationStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
			await customAuthenticationStateProvider.UpdateAuthenticationState(new UserSession
				{
					UserName = Model.UserName,
					Role = Model.Role,
					UserId = Model.Id
				});
			navigationManager.NavigateTo("/", true);
			//await RefreshSignIn();
			
		}
		catch (Exception ex)
		{
			errMess = ex.Message;
			Console.WriteLine(ex);
		}
		navigationManager.NavigateTo("/"); 
	}

	private async Task RefreshSignIn()
	{
		// Refresh the sign-in for the updated user
		await signInManager.RefreshSignInAsync(Model);
	}

	string errMess = string.Empty;
	string passwordChange = string.Empty;


	User currUser;
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }
	string currentUserId = string.Empty;	
}

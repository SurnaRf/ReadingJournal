@page "/books/create"
@using BusinessLayer;
@using ServiceLayer;
@using MudBlazor
@inject BookManager bookManager;
@inject EditionManager editionManager;
@inject AuthorManager authorManager;
@inject GenreManager genreManager;
@inject NavigationManager navigationManager;
@attribute [Authorize(Roles = "Administrator")]

<h3>Create</h3>


<h4>Book</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Model" OnValidSubmit="OnCreated">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label class="control-label">ISBN</label>
                <input @bind-value="Model.ISBN" class="form-control" />
                <ValidationMessage For="@( () => Model.ISBN )" />
            </div>
            <div class="form-group">
                <label class="control-label">Title</label>
                <input @bind-value="Model.Title" class="form-control" />
                <ValidationMessage For="@( () => Model.Title )" />
            </div>
            <div class="form-group">
                <label class="control-label">Description</label>
                <input @bind-value="Model.Description" class="form-control" />
                <ValidationMessage For="@( () => Model.Description )" />
            </div>
            <div class="form-group">
                <label class="control-label">Edition</label>
                <InputSelect @bind-Value="Model.EditionId" class="form-control">
                    @if (Model.EditionId == 0)
                    {
                        <option selected value="">None</option>
                    }
                    @foreach (var item in Editions)
                    {
                        <option value="@item.Id"> @item.Publisher.Name </option>
                    }
                </InputSelect>
                <span id="editionErrorLbl" class="text-danger">@editionError</span>
            </div>

            <div class="form-group">
                <div class="col-md-5 col-sm-12">
                    <MudSelect T="Genre" Label="Select Genres" Variant="Variant.Outlined" Multiple="true" @bind-Value="SelectedGenre">
                        @foreach (var genre in Genres)
                        {
                            <MudSelectItem Value="@genre">@genre.Name</MudSelectItem>
                        }
                    </MudSelect>
                </div>
                <div class="col-md-5 col-sm-12">
                    <MudButton class="btn btn-primary" OnClick="@(() => AddGenre())">Add</MudButton>
                </div>
                @foreach (var item in SelectedGenres)
                {
                    <a>@item.Name</a>
                    <a @onclick="@(() => SelectedGenres.Remove(item))"> ✖</a>
                    <a>| </a>
                }
            </div>

            <div class="form-group">
                <div class="col-md-5 col-sm-12">
                    <MudSelect T="Author" Label="Select Authors" Variant="Variant.Outlined" Multiple="true" @bind-Value="SelectedAuthor">
                        @foreach (var author in Authors)
                        {
                            <MudSelectItem Value="@author">@author.FirstName @author.LastName</MudSelectItem>
                        }
                    </MudSelect>
                </div>
                <div class="col-md-5 col-sm-12">
                    <MudButton class="btn btn-primary" OnClick="@(() => AddAuthor())">Add</MudButton>
                </div>
                @foreach (var item in SelectedAuthors)
                {
                    <a>@item.FirstName @item.LastName</a>
                    <a @onclick="@(() => SelectedAuthors.Remove(item))"> ✖</a>
                    <a>| </a>
                }
            </div>
            <br />
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </EditForm>
    </div>
</div>

<div>
    <a href="books">Back to List</a>
</div>

@code
{
    Book Model = new();
    ICollection<Edition> Editions = new List<Edition>();
    ICollection<Author> Authors = new List<Author>();
    ICollection<Genre> Genres = new List<Genre>();
    Genre SelectedGenre = null;
    Author SelectedAuthor = null;
    string editionError;
    string authorError;
    string genreError;
    List<Author> SelectedAuthors = new();
    List<Genre> SelectedGenres = new();


    protected override async Task OnInitializedAsync()
    {
        await LoadNavigation();
        Model.Edition = new Edition();        
    }

    private async Task LoadNavigation()
    {
        Editions = await editionManager.ReadAllAsync(true);
        Authors = await authorManager.ReadAllAsync(true, false);
        Genres = await genreManager.ReadAllAsync(true, false);
    }

    private async Task OnCreated()
    {
        if (Model.EditionId == 0)
        {
            editionError = "You must choose edition";
            return;
        }
        else
        {
            editionError = string.Empty;
        }
        Model.Genres ??= new List<Genre>();

        foreach (var selectedGenre in SelectedGenres)
        {
            if (!Model.Genres.Contains(selectedGenre))
            {
                Model.Genres.Add(selectedGenre);
            }
        }

        foreach (var selectedAuthor in SelectedAuthors)
        {
            if (!Model.Authors.Contains(selectedAuthor))
            {
                Model.Authors.Add(selectedAuthor);
            }
        }

        Model.CoverUrl ??= "";
        Model.Genres = SelectedGenres;
        Model.Edition = new Edition() { Id = Model.EditionId };
        await bookManager.CreateAsync(Model);
        navigationManager.NavigateTo("books", true);
    }

    private void AddGenre()
    {
        if (SelectedGenre != null)
        {
            SelectedGenres.Add(SelectedGenre);
            SelectedGenre = null;
        }
    }

    private void AddAuthor()
    {
        if (SelectedAuthor != null)
        {
            SelectedAuthors.Add(SelectedAuthor);
            SelectedAuthor = null;
        }
    }

}

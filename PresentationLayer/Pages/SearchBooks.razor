@page "/search"
@using BusinessLayer;
@using Services;
@using ServiceLayer;
@using System.Security.Claims

@inject BookService bookService
@inject ShelfManager shelfManager
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Administrator, User")]


<h3>SearchBooks</h3>

<input style="border:solid" type="text" @bind="searchText" />
<button style="border:solid" @onclick="Search">Search</button>
<br />

@if (Books != null)
{
    <div class="form-group">
        <label for="shelfSelect">Select a shelf:</label>
        @foreach (var shelf in Shelves)
        {
            <button style="display:block" @onclick="() => SelectShelf(shelf.Id)">@shelf.Name</button>
        }
    </div>

    <div class="book-list">
    @foreach (var book in Books)
    {
        <div class="book-item">
            <img src="@book.CoverUrl" alt="Book Cover" width="150" height="200" />
            <p>@book.Title</p>
            <button @onclick="() => AddToShelf(book)">Add to Shelf</button>
        </div>
    }  
    </div>
}

@code {
    private string searchText;
    public ICollection<Book> Books { get; set; }
    public int SelectedShelfId { get; set; }
    public IEnumerable<Shelf> Shelves { get; set; } =  new List<Shelf>();
    public Shelf SelectedShelf { get; set; }
    public SearchModel SearchModel { get; set; } = new SearchModel();


    private async Task Search()
    {
        Books = await bookService.GetBooks(searchText);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        Shelves = await shelfManager.ReadAllAsync(true);
        Shelves = Shelves.Where(shelf => shelf.UserId == userId).ToList();

        if (Shelves.Any())
        {
            SearchModel.SelectedShelfId = Shelves.First().Id;
        }
    }

    private async Task AddToShelf(Book book)
    {
        try
        {
            var selectedShelf = Shelves.FirstOrDefault(shelf => shelf.Id == SearchModel.SelectedShelfId);
            if (selectedShelf != null)
            {
                selectedShelf.Books.Add(book);
                await shelfManager.UpdateAsync(selectedShelf, true);
                navigationManager.NavigateTo("shelves");
            }
            else
            {
                Console.WriteLine("No shelf selected.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding book to shelf: {ex.Message}");
        }
    }

    private async Task SelectShelf(int shelfId)
    {
        SearchModel.SelectedShelfId = shelfId;
    }
}

@page "/shelves/edit/{Id:int}"
@using BusinessLayer;
@using ServiceLayer;
@inject ShelfManager shelfManager;
@inject UserManager userManager;
@inject BookManager bookManager;
@inject NavigationManager navigationManager;

<h3>Edit</h3>

<h4>Shelf</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Model" OnValidSubmit="OnUpdated">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label class="control-label">Title</label>
                <input @bind-value="Model.Name" class="form-control" />
                <ValidationMessage For="@( () => Model.Name )" />
            </div>
            <div class="form-group">
                <label class="control-label">Shelf purpose</label>
                <InputSelect @bind-Value="Model.ShelfPurpose" class="form-control">
                    @if (Model.ShelfPurpose == null)
                    {
                        <option selected value="">None</option>
                    }
                    @foreach (var sp in Enum.GetValues(typeof(ShelfPurpose)))
                    {
                        <option value="@sp">@sp</option>
                    }
                </InputSelect>
                <ValidationMessage For="@( () => Model.ShelfPurpose )" />
            </div>

            <div class="form-group">
                <label class="control-label">Remove books from shelf</label>
                <div class="col-md-5 col-sm-12">
                    <MudSelect T="Book" Label="Select Books" Variant="Variant.Outlined" Multiple="true" @bind-Value="SelectedBook">
                        @foreach (var book in Books)
                        {
                            <MudSelectItem Value="@book">@book.Title</MudSelectItem>
                        }
                    </MudSelect>
                </div>
                <div class="col-md-5 col-sm-12">
                    <MudButton class="btn btn-primary" OnClick="@(() => AddBook())">Add</MudButton>
                </div>

                @foreach (var item in SelectedBooks)
                {
                    <a>@item.Title</a>
                    <a @onclick="@(() => SelectedBooks.Remove(item))"> ✖</a>
                    <a>| </a>
                }

            </div>

            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </EditForm>
    </div>
</div>
<br />
<div>
    <a href="shelves">Back to List</a>
</div>

@code
{
    Shelf Model = new();
    IEnumerable<User> Users = new List<User>();
    ICollection<Book> Books = new List<Book>();
    Book SelectedBook = null;
    List<Book> SelectedBooks = new();

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Users = await userManager.ReadAllUsersAsync();      
        Model = await shelfManager.ReadAsync(Id, true, false);
        Books = Model.Books;
    }

    private async Task OnUpdated()
    {
        foreach (var selectedBook in SelectedBooks)
        {
            if (Model.Books.Contains(selectedBook))
            {
                Model.Books.Remove(selectedBook);
            }
        }

        await shelfManager.UpdateAsync(Model, true);
        navigationManager.NavigateTo("shelves");
    }

    private void AddBook()
    {
        if (SelectedBook != null)
        {
            SelectedBooks.Add(SelectedBook);
            SelectedBook = null;
        }
    }

}

@page "/shelves/create"
@using BusinessLayer;
@using ServiceLayer;
@using Services;
@using System.Security.Claims
@inject ShelfManager shelfManager;
@inject UserManager userManager;
@inject NavigationManager navigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Create</h3>

<h4>Shelf</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Model" OnValidSubmit="OnCreated">
            <DataAnnotationsValidator />            
            <div class="form-group">
                <label class="control-label">Name</label>
                <input @bind-value="Model.Name" class="form-control" />
                <ValidationMessage For="@( () => Model.Name)" />
            </div>
            <div class="form-group">
                <label class="control-label">Shelf purpose</label>
                <InputSelect @bind-Value="Model.ShelfPurpose" class="form-control">
                    @if (Model.ShelfPurpose == null)
                    {
                        <option selected value="">None</option>
                    }
                    @foreach (var sp in Enum.GetValues(typeof(ShelfPurpose)))
                    {
                        <option value="@sp">@sp</option>
                    }
                </InputSelect>
                <ValidationMessage For="@( () => Model.ShelfPurpose )" />
            </div>
            <br />
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </EditForm>
    </div>
</div>
<br />
<div>
    <a href="shelves">Back to List</a>
</div>

@code
{
    Shelf Model = new();
    IEnumerable<User> Users = new List<User>();
    string userError;
    string shelfPurposeError;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var name = user.Identity.Name;

        Model.User = await userManager.FindUserByNameAsync(name);
        Model.UserId = Model.User.Id;

        await base.OnInitializedAsync();
    }

    private async Task OnCreated()
    {
        if (Model.ShelfPurpose == null)
        {
            shelfPurposeError = "You must choose a shelf purpose";
            return;
        }

        else
        {
            userError = string.Empty;
        }

        Model.User = new() { Id = Model.UserId };

        await shelfManager.CreateAsync(Model);
        navigationManager.NavigateTo("shelves", true);
    }

}

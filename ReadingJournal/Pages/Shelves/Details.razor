@page "/shelves/details/{Id:int}"
@using BusinessLayer
@using ServiceLayer
@inject ShelfManager shelfManager
@inject UserManager userManager
@inject BookManager bookManager

<h3>Details</h3>

@if (Model != null)
{
    <div>
        <h4>Shelf</h4>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">
                Name
            </dt>
            <dd class="col-sm-10">
                @Model.Name
            </dd>
            <dt class="col-sm-2">
                User
            </dt>
            <dd class="col-sm-10">
                @if (Model.User != null)
                {
                    @Model.User.UserName
                }
                else
                {
                    <span>User not available</span>
                }
            </dd>
            <dt class="col-sm-2">
                Shelf purpose
            </dt>
            <dd class="col-sm-10">
                @Model.ShelfPurpose
            </dd>
            <dt class="col-sm-2">
                Books
            </dt>
            <dd class="col-sm-10">
                @foreach (var book in Model.Books)
                {
                    var userBook = UserBooks.FirstOrDefault(ub => ub.BookId == book.Key);
                    <div>
                        <span>@book.Title</span>
                        <br/>
                        @if (userBook != null && Model.ShelfPurpose == ShelfPurpose.Read)
                        {
                            <StarRating TValue="int" Value="userBook.Rating ?? 0" ValueChanged="newValue => UpdateBookRating(userBook, newValue)" />
                        }
                        else if (userBook == null)
                        {
                             <span>User book information not available</span>
                        }
                    </div>
                }
            </dd>
        </dl>
    </div>
    <div>
        <a href="shelves/edit/@Model.Id">Edit</a> |
        <a href="shelves">Back to List</a>
    </div>
}
else
{
    <p>Loading shelf details...</p>
}

@code {
    Shelf Model = null;
    List<UserBook> UserBooks = new List<UserBook>();

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = await shelfManager.ReadAsync(Id, true, true);
        if (Model != null)
        {
            Model.User = await userManager.ReadUserAsync(Model.UserId);
            foreach (var book in Model.Books)
            {
                var userBook = await bookManager.ReadUserBookAsync(Model.User.Id, book.Key);
                if (userBook != null)
                {
                    UserBooks.Add(userBook);
                }
            }
        }
    }

    private async Task UpdateBookRating(UserBook userBook, int newRating)
    {
        if (userBook != null)
        {
            userBook.Rating = newRating;
            await bookManager.UpdateUserBookAsync(userBook);
        }
    }
}

@page "/friendrequests"
@using BusinessLayer
@using Microsoft.AspNetCore.Identity;
@using ServiceLayer
@inject UserManager<User> userManager
@inject UserManager identityManager
@inject FriendRequestManager friendRequestManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "User")]


<h3>Friend Requests</h3>

@if (friendRequests == null)
{
    <p>Loading...</p>
}
else if (friendRequests.Count == 0)
{
    <p>No friend requests.</p>
}
else
{
    foreach (var friendRequest in friendRequests)
    {
        <div>
            <p>@friendRequest.Sender.UserName wants to be your friend.</p>
            <button class="btn btn-primary" @onclick="() => AcceptFriendRequest(friendRequest.RequestId)">Accept</button>
            <button class="btn-danger btn" @onclick="() => DeleteFriendRequest(friendRequest.RequestId)">Delete</button>
        </div>
    }
}

@code {
    private List<FriendRequest> friendRequests;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var name = user.Identity.Name;

        var authUser = await identityManager.FindUserByNameAsync(name);
        var authUserId = authUser.Id;

        friendRequests = await friendRequestManager.GetFriendRequestsForUserAsync(authUserId, true);
    }

    private async Task AcceptFriendRequest(string requestId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var name = user.Identity.Name;

        var authUser = await identityManager.FindUserByNameAsync(name);
        var authUserId = authUser.Id;

        await friendRequestManager.AcceptFriendRequestAsync(requestId);
        friendRequests = await friendRequestManager.GetFriendRequestsForUserAsync(authUserId);
    }

    private async Task DeleteFriendRequest(string requestId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var name = user.Identity.Name;

        var authUser = await identityManager.FindUserByNameAsync(name);
        var authUserId = authUser.Id;

        await friendRequestManager.DeleteFriendRequestAsync(requestId);
        friendRequests = await friendRequestManager.GetFriendRequestsForUserAsync(authUserId);
    }
}
